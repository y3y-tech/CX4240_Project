{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "view-in-github"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/y3y-tech/CX4240_Project/blob/main/Preliminary_Stock_Predictor_Models.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8dbc8294",
      "metadata": {},
      "source": [
        "## Imports"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "604f82df",
      "metadata": {},
      "outputs": [],
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from xgboost import XGBClassifier\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential, Model\n",
        "from tensorflow.keras.layers import Dense, Dropout, LSTM, SimpleRNN, Input, LayerNormalization, MultiHeadAttention, GlobalAveragePooling1D\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fba3a7b1",
      "metadata": {},
      "source": [
        "## Data - Feature Engineering"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "yTpUTg8OpF9L",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 766
        },
        "id": "yTpUTg8OpF9L",
        "outputId": "8dfeb5f7-0a3e-4162-9bf4-fb17e0d0937c"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[*********************100%***********************]  1 of 1 completed"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[-1.38149652 -1.34151046 -1.34092318 -0.30122582 -0.02148476  0.46354094]\n",
            " [-1.37325166 -1.34600895 -1.33591042 -0.12980598  0.13132964  0.99284058]\n",
            " [-1.34958302 -1.34349989 -1.32638412 -0.0564987   0.51136549  0.73730829]\n",
            " [-1.32559382 -1.33957534 -1.31732482 -0.05245072  0.51926383  0.19436662]\n",
            " [-1.28613069 -1.33332398 -1.31214598 -0.08527829  0.90053554 -0.40349343]\n",
            " [-1.24628902 -1.31229346 -1.30367187 -0.26477921  0.90986256  0.4684589 ]\n",
            " [-1.2230568  -1.29648861 -1.29687029 -0.29794627  0.50061212  0.08220095]\n",
            " [-1.20577164 -1.27592543 -1.28746221 -0.298619    0.35407923  0.40928273]\n",
            " [-1.194897   -1.25842006 -1.27919229 -0.28414694  0.19612627 -0.14518031]\n",
            " [-1.17464217 -1.22843527 -1.2730033  -0.65703035  0.42725043  0.09282427]]\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "(array([[-1.194897  , -1.25842006, -1.27919229, -0.28414694,  0.19612627,\n",
              "         -0.14518031],\n",
              "        [-1.17464217, -1.22843527, -1.2730033 , -0.65703035,  0.42725043,\n",
              "          0.09282427],\n",
              "        [-1.16761382, -1.20490151, -1.26903003, -0.61519451,  0.10135542,\n",
              "         -0.23352459],\n",
              "        ...,\n",
              "        [ 1.49485374,  1.48864558,  1.36209233, -0.49082089,  0.05387475,\n",
              "          0.06452419],\n",
              "        [ 1.52767856,  1.5034325 ,  1.38483292, -0.60321975,  0.7369701 ,\n",
              "         -0.0081165 ],\n",
              "        [ 1.5365915 ,  1.51318188,  1.40457038, -0.58811865,  0.14779072,\n",
              "         -0.22712106]]),\n",
              " array([[[-1.35652652, -1.30816143, -1.33913923, -0.46719535,\n",
              "          -0.47031752,  0.18125957],\n",
              "         [-1.3835394 , -1.32586263, -1.34229774, -0.33971809,\n",
              "          -0.73740704, -1.24651476],\n",
              "         [-1.38149652, -1.34151046, -1.34092318, -0.30122582,\n",
              "          -0.02148476,  0.46354094],\n",
              "         ...,\n",
              "         [-1.24628902, -1.31229346, -1.30367187, -0.26477921,\n",
              "           0.90986256,  0.4684589 ],\n",
              "         [-1.2230568 , -1.29648861, -1.29687029, -0.29794627,\n",
              "           0.50061212,  0.08220095],\n",
              "         [-1.20577164, -1.27592543, -1.28746221, -0.298619  ,\n",
              "           0.35407923,  0.40928273]],\n",
              " \n",
              "        [[-1.3835394 , -1.32586263, -1.34229774, -0.33971809,\n",
              "          -0.73740704, -1.24651476],\n",
              "         [-1.38149652, -1.34151046, -1.34092318, -0.30122582,\n",
              "          -0.02148476,  0.46354094],\n",
              "         [-1.37325166, -1.34600895, -1.33591042, -0.12980598,\n",
              "           0.13132964,  0.99284058],\n",
              "         ...,\n",
              "         [-1.2230568 , -1.29648861, -1.29687029, -0.29794627,\n",
              "           0.50061212,  0.08220095],\n",
              "         [-1.20577164, -1.27592543, -1.28746221, -0.298619  ,\n",
              "           0.35407923,  0.40928273],\n",
              "         [-1.194897  , -1.25842006, -1.27919229, -0.28414694,\n",
              "           0.19612627, -0.14518031]],\n",
              " \n",
              "        [[-1.38149652, -1.34151046, -1.34092318, -0.30122582,\n",
              "          -0.02148476,  0.46354094],\n",
              "         [-1.37325166, -1.34600895, -1.33591042, -0.12980598,\n",
              "           0.13132964,  0.99284058],\n",
              "         [-1.34958302, -1.34349989, -1.32638412, -0.0564987 ,\n",
              "           0.51136549,  0.73730829],\n",
              "         ...,\n",
              "         [-1.20577164, -1.27592543, -1.28746221, -0.298619  ,\n",
              "           0.35407923,  0.40928273],\n",
              "         [-1.194897  , -1.25842006, -1.27919229, -0.28414694,\n",
              "           0.19612627, -0.14518031],\n",
              "         [-1.17464217, -1.22843527, -1.2730033 , -0.65703035,\n",
              "           0.42725043,  0.09282427]],\n",
              " \n",
              "        ...,\n",
              " \n",
              "        [[ 1.2049835 ,  1.18705037,  1.1585799 , -0.84096775,\n",
              "           0.65628154,  0.28162759],\n",
              "         [ 1.26590251,  1.21739774,  1.17923172, -0.7058929 ,\n",
              "           1.42919967,  0.90173937],\n",
              "         [ 1.31763441,  1.24682218,  1.20039941, -0.70556415,\n",
              "           1.20283309,  0.14787458],\n",
              "         ...,\n",
              "         [ 1.46286312,  1.40324205,  1.29895173, -0.49375489,\n",
              "           0.18699439,  0.6722829 ],\n",
              "         [ 1.47654911,  1.43237753,  1.31803069, -0.49176956,\n",
              "           0.26539708,  0.08025429],\n",
              "         [ 1.48975239,  1.46191056,  1.33994574, -0.4913469 ,\n",
              "           0.2535031 ,  0.25643841]],\n",
              " \n",
              "        [[ 1.26590251,  1.21739774,  1.17923172, -0.7058929 ,\n",
              "           1.42919967,  0.90173937],\n",
              "         [ 1.31763441,  1.24682218,  1.20039941, -0.70556415,\n",
              "           1.20283309,  0.14787458],\n",
              "         [ 1.36197488,  1.27097446,  1.22100825, -0.70434642,\n",
              "           1.02071119, -0.03870131],\n",
              "         ...,\n",
              "         [ 1.47654911,  1.43237753,  1.31803069, -0.49176956,\n",
              "           0.26539708,  0.08025429],\n",
              "         [ 1.48975239,  1.46191056,  1.33994574, -0.4913469 ,\n",
              "           0.2535031 ,  0.25643841],\n",
              "         [ 1.49485374,  1.48864558,  1.36209233, -0.49082089,\n",
              "           0.05387475,  0.06452419]],\n",
              " \n",
              "        [[ 1.31763441,  1.24682218,  1.20039941, -0.70556415,\n",
              "           1.20283309,  0.14787458],\n",
              "         [ 1.36197488,  1.27097446,  1.22100825, -0.70434642,\n",
              "           1.02071119, -0.03870131],\n",
              "         [ 1.40758984,  1.30408889,  1.2431402 , -0.79105756,\n",
              "           1.05211408,  0.27676243],\n",
              "         ...,\n",
              "         [ 1.48975239,  1.46191056,  1.33994574, -0.4913469 ,\n",
              "           0.2535031 ,  0.25643841],\n",
              "         [ 1.49485374,  1.48864558,  1.36209233, -0.49082089,\n",
              "           0.05387475,  0.06452419],\n",
              "         [ 1.52767856,  1.5034325 ,  1.38483292, -0.60321975,\n",
              "           0.7369701 , -0.0081165 ]]]),\n",
              " array([1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1,\n",
              "        0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1,\n",
              "        0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n",
              "        1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0,\n",
              "        1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1,\n",
              "        0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1,\n",
              "        1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0,\n",
              "        1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1,\n",
              "        0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n",
              "        0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1,\n",
              "        0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0,\n",
              "        1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0,\n",
              "        0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n",
              "        0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,\n",
              "        1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0,\n",
              "        1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,\n",
              "        1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0,\n",
              "        1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0,\n",
              "        0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0,\n",
              "        0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n",
              "        1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0,\n",
              "        0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0,\n",
              "        1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1,\n",
              "        1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1,\n",
              "        0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,\n",
              "        0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1,\n",
              "        1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1,\n",
              "        1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0,\n",
              "        1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1,\n",
              "        0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
              "        1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,\n",
              "        1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0,\n",
              "        1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,\n",
              "        0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1,\n",
              "        0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0,\n",
              "        1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1,\n",
              "        1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,\n",
              "        1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1,\n",
              "        1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1,\n",
              "        0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,\n",
              "        0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,\n",
              "        0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1,\n",
              "        0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n",
              "        1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1,\n",
              "        1, 0, 1, 1, 1, 1, 1, 0, 0]))"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "\n",
        "# Feature Engineering\n",
        "\"\"\"\n",
        "Arguments:\n",
        "    ticker: str: the stock ticker\n",
        "    start: str: the start date\n",
        "    end: str: the end date\n",
        "    seq_len: int: the sequence length\n",
        "Returns:\n",
        "    X_scaled: np.array: the scaled features\n",
        "    X_seq: np.array: the sequence features\n",
        "    y_seq: np.array: the target\n",
        "\"\"\"\n",
        "\n",
        "def load_and_engineer_data(ticker=\"^GSPC\", start=\"2020-01-01\", end=\"2024-01-01\", seq_len=10):\n",
        "    # Download the data from the Yahoo Finance API\n",
        "    df = yf.download(ticker, start=start, end=end)\n",
        "\n",
        "    # Manipulation\n",
        "    df['Return'] = df['Close'].pct_change()\n",
        "    df['MA5'] = df['Close'].rolling(window=5).mean()\n",
        "    df['MA10'] = df['Close'].rolling(window=10).mean()\n",
        "    df['MA20'] = df['Close'].rolling(window=20).mean()\n",
        "    df['Volatility'] = df['Return'].rolling(window=10).std()\n",
        "    df['Momentum'] = df['Close'] - df['Close'].shift(5)\n",
        "    df['Target'] = (df['Close'].shift(-1) > df['Close']).astype(int)\n",
        "    df.dropna(inplace=True)\n",
        "\n",
        "    # Save the df as a table in the data folder\n",
        "    df.to_csv(f'Data/{ticker}.csv')\n",
        "\n",
        "    features = ['MA5', 'MA10', 'MA20', 'Volatility', 'Momentum', 'Return']\n",
        "    scaler = StandardScaler()\n",
        "    X_scaled = scaler.fit_transform(df[features])\n",
        "    y = df['Target'].values\n",
        "\n",
        "    # Sequence data for DL\n",
        "    X_seq, y_seq = [], []\n",
        "    for i in range(seq_len, len(X_scaled)):\n",
        "        X_seq.append(X_scaled[i-seq_len:i])\n",
        "        y_seq.append(y[i])\n",
        "\n",
        "    # Print header of the array \n",
        "    print(X_seq, y_seq)\n",
        "    return np.array(X_scaled[seq_len:]), np.array(X_seq), np.array(y_seq)\n",
        "\n",
        "load_and_engineer_data()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9315cc03",
      "metadata": {},
      "source": [
        "## Model training "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "c2a81c40",
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[*********************100%***********************]  1 of 1 completed\n",
            "/opt/anaconda3/lib/python3.12/site-packages/xgboost/training.py:183: UserWarning: [16:08:47] WARNING: /Users/runner/work/xgboost/xgboost/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n",
            "/opt/anaconda3/lib/python3.12/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Machine Learning Models\n",
        "def train_ml_models(X, y):\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)\n",
        "    models = {\"Logistic Regression\": LogisticRegression(max_iter=1000),\n",
        "        \"Random Forest\": RandomForestClassifier(),\n",
        "        \"XGBoost\": XGBClassifier(use_label_encoder=False, eval_metric='logloss'),\n",
        "        \"SVM\": SVC(),\n",
        "        \"KNN\": KNeighborsClassifier(n_neighbors=5)\n",
        "    }\n",
        "    results = {}\n",
        "    for name, model in models.items():\n",
        "        model.fit(X_train, y_train)\n",
        "        acc = model.score(X_test, y_test)\n",
        "        results[name] = round(acc, 4)\n",
        "    return results\n",
        "\n",
        "# Deep Learning Models\n",
        "def train_rnn(X_seq, y_seq):\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X_seq, y_seq, test_size=0.2, shuffle=False)\n",
        "    model = Sequential([SimpleRNN(64, input_shape=(X_seq.shape[1], X_seq.shape[2])),\n",
        "        Dropout(0.2),\n",
        "        Dense(1, activation='sigmoid')\n",
        "    ])\n",
        "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "    model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1, verbose=0)\n",
        "    _, acc = model.evaluate(X_test, y_test, verbose=0)\n",
        "    return round(acc, 4)\n",
        "\n",
        "def train_lstm(X_seq, y_seq):\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X_seq, y_seq, test_size=0.2, shuffle=False)\n",
        "    model = Sequential([LSTM(64, input_shape=(X_seq.shape[1], X_seq.shape[2])),\n",
        "        Dropout(0.2),\n",
        "        Dense(1, activation='sigmoid')\n",
        "    ])\n",
        "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "    model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1, verbose=0)\n",
        "    _, acc = model.evaluate(X_test, y_test, verbose=0)\n",
        "    return round(acc, 4)\n",
        "\n",
        "def transformer_encoder(inputs, head_size=64, num_heads=2, ff_dim=128, dropout=0.1):\n",
        "    x = LayerNormalization(epsilon=1e-6)(inputs)\n",
        "    x = MultiHeadAttention(num_heads=num_heads, key_dim=head_size, dropout=dropout)(x, x)\n",
        "    x = Dropout(dropout)(x)\n",
        "    res = x + inputs\n",
        "    x = LayerNormalization(epsilon=1e-6)(res)\n",
        "    x = Dense(ff_dim, activation=\"relu\")(x)\n",
        "    x = Dropout(dropout)(x)\n",
        "    x = Dense(inputs.shape[-1])(x)\n",
        "    return x + res\n",
        "\n",
        "def train_transformer(X_seq, y_seq):\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X_seq, y_seq, test_size=0.2, shuffle=False)\n",
        "    input_layer = Input(shape=(X_seq.shape[1], X_seq.shape[2]))\n",
        "    x = transformer_encoder(input_layer)\n",
        "    x = GlobalAveragePooling1D()(x)\n",
        "    x = Dropout(0.2)(x)\n",
        "    x = Dense(64, activation='relu')(x)\n",
        "    x = Dropout(0.2)(x)\n",
        "    output = Dense(1, activation='sigmoid')(x)\n",
        "    model = Model(inputs=input_layer, outputs=output)\n",
        "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "    model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1, verbose=0)\n",
        "    _, acc = model.evaluate(X_test, y_test, verbose=0)\n",
        "    return round(acc, 4)\n",
        "\n",
        "# Run & Compare All Models\n",
        "X_flat, X_seq, y_seq = load_and_engineer_data()\n",
        "ml_results = train_ml_models(X_flat, y_seq)\n",
        "dl_results = {\n",
        "    \"RNN\": train_rnn(X_seq, y_seq),\n",
        "    \"LSTM\": train_lstm(X_seq, y_seq),\n",
        "    \"Transformer\": train_transformer(X_seq, y_seq)\n",
        "}\n",
        "\n",
        "# Combine & Plot\n",
        "all_results = {**ml_results, **dl_results}\n",
        "plt.figure(figsize=(12, 6))\n",
        "bars = plt.bar(all_results.keys(), all_results.values())\n",
        "plt.ylim(0, 1)\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.title(\"Model Accuracy Comparison (ML + DL)\")\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "for bar in bars:\n",
        "    height = bar.get_height()\n",
        "    plt.text(bar.get_x() + bar.get_width()/2., height + 0.02, f\"{height:.2f}\", ha='center')\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f59ff43c",
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "wLbh9vjlqMlU",
      "metadata": {
        "id": "wLbh9vjlqMlU"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "include_colab_link": true,
      "provenance": []
    },
    "kernelspec": {
      "display_name": "base",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
